// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id                        Int     @id @default(autoincrement())
  email                     String  @unique
  name                      String? 
  emailVerified             DateTime?
  image                     String?
  picture                   String?
  account         Account[]
  session         Session[]  
  likes           Like[]
  comments        Comments[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in  Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Store{
  id              Int       @id @default(autoincrement())
  authorId        Int?
  phone           String?
  address         String?
  lat             String?  // y_dnts
  lng             String?  // x_cnts
  name            String?
  category        String?
  storeType       String?
  foodCertifyName String?
  likes           Like[]
  comments        Comments[]
}

model Like {
  id Int @id @default(autoincrement())
  storeId Int
  userId Int
  createdAt DateTime @default(now())
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)  
  @@index([userId,storeId])
}

model Comments {
  id Int @id @default(autoincrement())
  storeId Int
  userId Int
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)  
  @@index([storeId,userId])
}